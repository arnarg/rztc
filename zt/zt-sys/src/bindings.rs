/* automatically generated by rust-bindgen 0.59.2 */

pub const ZT_DEFAULT_PORT: u32 = 9993;
pub const ZT_MIN_MTU: u32 = 1280;
pub const ZT_MAX_MTU: u32 = 10000;
pub const ZT_MIN_PHYSMTU: u32 = 1400;
pub const ZT_DEFAULT_PHYSMTU: u32 = 1432;
pub const ZT_MAX_PHYSPAYLOAD: u32 = 10100;
pub const ZT_MAX_HEADROOM: u32 = 224;
pub const ZT_MAX_PHYSMTU: u32 = 10324;
pub const ZT_MAX_REMOTE_TRACE_SIZE: u32 = 10000;
pub const ZT_MAX_NETWORK_SHORT_NAME_LENGTH: u32 = 127;
pub const ZT_MAX_NETWORK_ROUTES: u32 = 128;
pub const ZT_MAX_ZT_ASSIGNED_ADDRESSES: u32 = 32;
pub const ZT_MAX_NETWORK_SPECIALISTS: u32 = 256;
pub const ZT_MAX_NETWORK_MULTICAST_SUBSCRIPTIONS: u32 = 4096;
pub const ZT_RULES_ENGINE_REVISION: u32 = 1;
pub const ZT_MAX_NETWORK_RULES: u32 = 1024;
pub const ZT_MAX_NETWORK_CAPABILITIES: u32 = 128;
pub const ZT_MAX_NETWORK_TAGS: u32 = 128;
pub const ZT_MAX_PEER_NETWORK_PATHS: u32 = 64;
pub const ZT_MAX_CONFIGURABLE_PATHS: u32 = 32;
pub const ZT_MAX_CAPABILITY_RULES: u32 = 64;
pub const ZT_MAX_CERTIFICATES_OF_OWNERSHIP: u32 = 4;
pub const ZT_MAX_CAPABILITY_CUSTODY_CHAIN_LENGTH: u32 = 7;
pub const ZT_MAX_MULTICAST_SUBSCRIPTIONS: u32 = 1024;
pub const ZT_PATH_LINK_QUALITY_MAX: u32 = 255;
pub const ZT_MAX_DNS_SERVERS: u32 = 4;
pub const ZT_RULE_PACKET_CHARACTERISTICS_INBOUND: i64 = -9223372036854775808;
pub const ZT_RULE_PACKET_CHARACTERISTICS_MULTICAST: u64 = 4611686018427387904;
pub const ZT_RULE_PACKET_CHARACTERISTICS_BROADCAST: u64 = 2305843009213693952;
pub const ZT_RULE_PACKET_CHARACTERISTICS_SENDER_IP_AUTHENTICATED: u64 = 1152921504606846976;
pub const ZT_RULE_PACKET_CHARACTERISTICS_SENDER_MAC_AUTHENTICATED: u64 = 576460752303423488;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_RESERVED_0: u32 = 2048;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_RESERVED_1: u32 = 1024;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_RESERVED_2: u32 = 512;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_NS: u32 = 256;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_CWR: u32 = 128;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_ECE: u32 = 64;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_URG: u32 = 32;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_ACK: u32 = 16;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_PSH: u32 = 8;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_RST: u32 = 4;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_SYN: u32 = 2;
pub const ZT_RULE_PACKET_CHARACTERISTICS_TCP_FIN: u32 = 1;
pub const ZT_REMOTE_TRACE_FIELD__EVENT: &[u8; 6usize] = b"event\0";
pub const ZT_REMOTE_TRACE_FIELD__NODE_ID: &[u8; 7usize] = b"nodeId\0";
pub const ZT_REMOTE_TRACE_FIELD__PACKET_ID: &[u8; 9usize] = b"packetId\0";
pub const ZT_REMOTE_TRACE_FIELD__PACKET_VERB: &[u8; 11usize] = b"packetVerb\0";
pub const ZT_REMOTE_TRACE_FIELD__PACKET_TRUSTED_PATH_ID: &[u8; 20usize] = b"packetTrustedPathId\0";
pub const ZT_REMOTE_TRACE_FIELD__PACKET_TRUSTED_PATH_APPROVED: &[u8; 26usize] =
    b"packetTrustedPathApproved\0";
pub const ZT_REMOTE_TRACE_FIELD__PACKET_HOPS: &[u8; 11usize] = b"packetHops\0";
pub const ZT_REMOTE_TRACE_FIELD__REMOTE_ZTADDR: &[u8; 13usize] = b"remoteZtAddr\0";
pub const ZT_REMOTE_TRACE_FIELD__REMOTE_PHYADDR: &[u8; 14usize] = b"remotePhyAddr\0";
pub const ZT_REMOTE_TRACE_FIELD__LOCAL_ZTADDR: &[u8; 12usize] = b"localZtAddr\0";
pub const ZT_REMOTE_TRACE_FIELD__LOCAL_PHYADDR: &[u8; 13usize] = b"localPhyAddr\0";
pub const ZT_REMOTE_TRACE_FIELD__LOCAL_SOCKET: &[u8; 12usize] = b"localSocket\0";
pub const ZT_REMOTE_TRACE_FIELD__IP_SCOPE: &[u8; 15usize] = b"phyAddrIpScope\0";
pub const ZT_REMOTE_TRACE_FIELD__NETWORK_ID: &[u8; 10usize] = b"networkId\0";
pub const ZT_REMOTE_TRACE_FIELD__SOURCE_ZTADDR: &[u8; 13usize] = b"sourceZtAddr\0";
pub const ZT_REMOTE_TRACE_FIELD__DEST_ZTADDR: &[u8; 11usize] = b"destZtAddr\0";
pub const ZT_REMOTE_TRACE_FIELD__SOURCE_MAC: &[u8; 10usize] = b"sourceMac\0";
pub const ZT_REMOTE_TRACE_FIELD__DEST_MAC: &[u8; 8usize] = b"destMac\0";
pub const ZT_REMOTE_TRACE_FIELD__ETHERTYPE: &[u8; 10usize] = b"etherType\0";
pub const ZT_REMOTE_TRACE_FIELD__VLAN_ID: &[u8; 7usize] = b"vlanId\0";
pub const ZT_REMOTE_TRACE_FIELD__FRAME_LENGTH: &[u8; 12usize] = b"frameLength\0";
pub const ZT_REMOTE_TRACE_FIELD__FRAME_DATA: &[u8; 10usize] = b"frameData\0";
pub const ZT_REMOTE_TRACE_FIELD__FILTER_FLAG_NOTEE: &[u8; 12usize] = b"filterNoTee\0";
pub const ZT_REMOTE_TRACE_FIELD__FILTER_FLAG_INBOUND: &[u8; 14usize] = b"filterInbound\0";
pub const ZT_REMOTE_TRACE_FIELD__FILTER_RESULT: &[u8; 13usize] = b"filterResult\0";
pub const ZT_REMOTE_TRACE_FIELD__FILTER_BASE_RULE_LOG: &[u8; 18usize] = b"filterBaseRuleLog\0";
pub const ZT_REMOTE_TRACE_FIELD__FILTER_CAP_RULE_LOG: &[u8; 17usize] = b"filterCapRuleLog\0";
pub const ZT_REMOTE_TRACE_FIELD__FILTER_CAP_ID: &[u8; 20usize] = b"filterMatchingCapId\0";
pub const ZT_REMOTE_TRACE_FIELD__CREDENTIAL_TYPE: &[u8; 9usize] = b"credType\0";
pub const ZT_REMOTE_TRACE_FIELD__CREDENTIAL_ID: &[u8; 7usize] = b"credId\0";
pub const ZT_REMOTE_TRACE_FIELD__CREDENTIAL_TIMESTAMP: &[u8; 7usize] = b"credTs\0";
pub const ZT_REMOTE_TRACE_FIELD__CREDENTIAL_INFO: &[u8; 9usize] = b"credInfo\0";
pub const ZT_REMOTE_TRACE_FIELD__CREDENTIAL_ISSUED_TO: &[u8; 13usize] = b"credIssuedTo\0";
pub const ZT_REMOTE_TRACE_FIELD__CREDENTIAL_REVOCATION_TARGET: &[u8; 21usize] =
    b"credRevocationTarget\0";
pub const ZT_REMOTE_TRACE_FIELD__REASON: &[u8; 7usize] = b"reason\0";
pub const ZT_REMOTE_TRACE_FIELD__NETWORK_CONTROLLER_ID: &[u8; 20usize] = b"networkControllerId\0";
pub const ZT_REMOTE_TRACE_EVENT__RESETTING_PATHS_IN_SCOPE: u32 = 4096;
pub const ZT_REMOTE_TRACE_EVENT__PEER_CONFIRMING_UNKNOWN_PATH: u32 = 4097;
pub const ZT_REMOTE_TRACE_EVENT__PEER_LEARNED_NEW_PATH: u32 = 4098;
pub const ZT_REMOTE_TRACE_EVENT__PEER_REDIRECTED: u32 = 4099;
pub const ZT_REMOTE_TRACE_EVENT__PACKET_MAC_FAILURE: u32 = 4100;
pub const ZT_REMOTE_TRACE_EVENT__PACKET_INVALID: u32 = 4101;
pub const ZT_REMOTE_TRACE_EVENT__DROPPED_HELLO: u32 = 4102;
pub const ZT_REMOTE_TRACE_EVENT__OUTGOING_NETWORK_FRAME_DROPPED: u32 = 8192;
pub const ZT_REMOTE_TRACE_EVENT__INCOMING_NETWORK_ACCESS_DENIED: u32 = 8193;
pub const ZT_REMOTE_TRACE_EVENT__INCOMING_NETWORK_FRAME_DROPPED: u32 = 8194;
pub const ZT_REMOTE_TRACE_EVENT__CREDENTIAL_REJECTED: u32 = 8195;
pub const ZT_REMOTE_TRACE_EVENT__CREDENTIAL_ACCEPTED: u32 = 8196;
pub const ZT_REMOTE_TRACE_EVENT__NETWORK_CONFIG_REQUEST_SENT: u32 = 8197;
pub const ZT_REMOTE_TRACE_EVENT__NETWORK_FILTER_TRACE: u32 = 8198;
pub const ZT_REMOTE_TRACE_EVENT__RESETTING_PATHS_IN_SCOPE_S: &[u8; 5usize] = b"1000\0";
pub const ZT_REMOTE_TRACE_EVENT__PEER_CONFIRMING_UNKNOWN_PATH_S: &[u8; 5usize] = b"1001\0";
pub const ZT_REMOTE_TRACE_EVENT__PEER_LEARNED_NEW_PATH_S: &[u8; 5usize] = b"1002\0";
pub const ZT_REMOTE_TRACE_EVENT__PEER_REDIRECTED_S: &[u8; 5usize] = b"1003\0";
pub const ZT_REMOTE_TRACE_EVENT__PACKET_MAC_FAILURE_S: &[u8; 5usize] = b"1004\0";
pub const ZT_REMOTE_TRACE_EVENT__PACKET_INVALID_S: &[u8; 5usize] = b"1005\0";
pub const ZT_REMOTE_TRACE_EVENT__DROPPED_HELLO_S: &[u8; 5usize] = b"1006\0";
pub const ZT_REMOTE_TRACE_EVENT__OUTGOING_NETWORK_FRAME_DROPPED_S: &[u8; 5usize] = b"2000\0";
pub const ZT_REMOTE_TRACE_EVENT__INCOMING_NETWORK_ACCESS_DENIED_S: &[u8; 5usize] = b"2001\0";
pub const ZT_REMOTE_TRACE_EVENT__INCOMING_NETWORK_FRAME_DROPPED_S: &[u8; 5usize] = b"2002\0";
pub const ZT_REMOTE_TRACE_EVENT__CREDENTIAL_REJECTED_S: &[u8; 5usize] = b"2003\0";
pub const ZT_REMOTE_TRACE_EVENT__CREDENTIAL_ACCEPTED_S: &[u8; 5usize] = b"2004\0";
pub const ZT_REMOTE_TRACE_EVENT__NETWORK_CONFIG_REQUEST_SENT_S: &[u8; 5usize] = b"2005\0";
pub const ZT_REMOTE_TRACE_EVENT__NETWORK_FILTER_TRACE_S: &[u8; 5usize] = b"2006\0";
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type sa_family_t = ::std::os::raw::c_ushort;
pub const ZT_ResultCode_ZT_RESULT_OK: ZT_ResultCode = 0;
pub const ZT_ResultCode_ZT_RESULT_OK_IGNORED: ZT_ResultCode = 1;
pub const ZT_ResultCode_ZT_RESULT_FATAL_ERROR_OUT_OF_MEMORY: ZT_ResultCode = 100;
pub const ZT_ResultCode_ZT_RESULT_FATAL_ERROR_DATA_STORE_FAILED: ZT_ResultCode = 101;
pub const ZT_ResultCode_ZT_RESULT_FATAL_ERROR_INTERNAL: ZT_ResultCode = 102;
pub const ZT_ResultCode_ZT_RESULT_ERROR_NETWORK_NOT_FOUND: ZT_ResultCode = 1000;
pub const ZT_ResultCode_ZT_RESULT_ERROR_UNSUPPORTED_OPERATION: ZT_ResultCode = 1001;
pub const ZT_ResultCode_ZT_RESULT_ERROR_BAD_PARAMETER: ZT_ResultCode = 1002;
pub type ZT_ResultCode = ::std::os::raw::c_uint;
pub const ZT_Event_ZT_EVENT_UP: ZT_Event = 0;
pub const ZT_Event_ZT_EVENT_OFFLINE: ZT_Event = 1;
pub const ZT_Event_ZT_EVENT_ONLINE: ZT_Event = 2;
pub const ZT_Event_ZT_EVENT_DOWN: ZT_Event = 3;
pub const ZT_Event_ZT_EVENT_FATAL_ERROR_IDENTITY_COLLISION: ZT_Event = 4;
pub const ZT_Event_ZT_EVENT_TRACE: ZT_Event = 5;
pub const ZT_Event_ZT_EVENT_USER_MESSAGE: ZT_Event = 6;
pub const ZT_Event_ZT_EVENT_REMOTE_TRACE: ZT_Event = 7;
pub type ZT_Event = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_RemoteTrace {
    pub origin: u64,
    pub data: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ZT_RemoteTrace() {
    assert_eq!(
        ::std::mem::size_of::<ZT_RemoteTrace>(),
        24usize,
        concat!("Size of: ", stringify!(ZT_RemoteTrace))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_RemoteTrace>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_RemoteTrace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_RemoteTrace>())).origin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_RemoteTrace),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_RemoteTrace>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_RemoteTrace),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_RemoteTrace>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_RemoteTrace),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_UserMessage {
    pub origin: u64,
    pub typeId: u64,
    pub data: *const ::std::os::raw::c_void,
    pub length: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ZT_UserMessage() {
    assert_eq!(
        ::std::mem::size_of::<ZT_UserMessage>(),
        32usize,
        concat!("Size of: ", stringify!(ZT_UserMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_UserMessage>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_UserMessage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_UserMessage>())).origin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_UserMessage),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_UserMessage>())).typeId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_UserMessage),
            "::",
            stringify!(typeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_UserMessage>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_UserMessage),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_UserMessage>())).length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_UserMessage),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_NodeStatus {
    pub address: u64,
    pub publicIdentity: *const ::std::os::raw::c_char,
    pub secretIdentity: *const ::std::os::raw::c_char,
    pub online: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ZT_NodeStatus() {
    assert_eq!(
        ::std::mem::size_of::<ZT_NodeStatus>(),
        32usize,
        concat!("Size of: ", stringify!(ZT_NodeStatus))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_NodeStatus>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_NodeStatus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_NodeStatus>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_NodeStatus),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_NodeStatus>())).publicIdentity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_NodeStatus),
            "::",
            stringify!(publicIdentity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_NodeStatus>())).secretIdentity as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_NodeStatus),
            "::",
            stringify!(secretIdentity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_NodeStatus>())).online as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_NodeStatus),
            "::",
            stringify!(online)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_NodeStatistics {
    pub inVerbCounts: [u64; 32usize],
    pub inVerbBytes: [u64; 32usize],
}
#[test]
fn bindgen_test_layout_ZT_NodeStatistics() {
    assert_eq!(
        ::std::mem::size_of::<ZT_NodeStatistics>(),
        512usize,
        concat!("Size of: ", stringify!(ZT_NodeStatistics))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_NodeStatistics>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_NodeStatistics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_NodeStatistics>())).inVerbCounts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_NodeStatistics),
            "::",
            stringify!(inVerbCounts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_NodeStatistics>())).inVerbBytes as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_NodeStatistics),
            "::",
            stringify!(inVerbBytes)
        )
    );
}
pub const ZT_VirtualNetworkStatus_ZT_NETWORK_STATUS_REQUESTING_CONFIGURATION:
    ZT_VirtualNetworkStatus = 0;
pub const ZT_VirtualNetworkStatus_ZT_NETWORK_STATUS_OK: ZT_VirtualNetworkStatus = 1;
pub const ZT_VirtualNetworkStatus_ZT_NETWORK_STATUS_ACCESS_DENIED: ZT_VirtualNetworkStatus = 2;
pub const ZT_VirtualNetworkStatus_ZT_NETWORK_STATUS_NOT_FOUND: ZT_VirtualNetworkStatus = 3;
pub const ZT_VirtualNetworkStatus_ZT_NETWORK_STATUS_PORT_ERROR: ZT_VirtualNetworkStatus = 4;
pub const ZT_VirtualNetworkStatus_ZT_NETWORK_STATUS_CLIENT_TOO_OLD: ZT_VirtualNetworkStatus = 5;
pub const ZT_VirtualNetworkStatus_ZT_NETWORK_STATUS_AUTHENTICATION_REQUIRED:
    ZT_VirtualNetworkStatus = 6;
pub type ZT_VirtualNetworkStatus = ::std::os::raw::c_uint;
pub const ZT_VirtualNetworkType_ZT_NETWORK_TYPE_PRIVATE: ZT_VirtualNetworkType = 0;
pub const ZT_VirtualNetworkType_ZT_NETWORK_TYPE_PUBLIC: ZT_VirtualNetworkType = 1;
pub type ZT_VirtualNetworkType = ::std::os::raw::c_uint;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_ACTION_DROP: ZT_VirtualNetworkRuleType = 0;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_ACTION_ACCEPT: ZT_VirtualNetworkRuleType = 1;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_ACTION_TEE: ZT_VirtualNetworkRuleType = 2;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_ACTION_WATCH: ZT_VirtualNetworkRuleType = 3;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_ACTION_REDIRECT: ZT_VirtualNetworkRuleType = 4;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_ACTION_BREAK: ZT_VirtualNetworkRuleType = 5;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_ACTION_PRIORITY: ZT_VirtualNetworkRuleType = 6;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_ACTION__MAX_ID: ZT_VirtualNetworkRuleType = 15;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_SOURCE_ZEROTIER_ADDRESS:
    ZT_VirtualNetworkRuleType = 24;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_DEST_ZEROTIER_ADDRESS:
    ZT_VirtualNetworkRuleType = 25;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_VLAN_ID: ZT_VirtualNetworkRuleType = 26;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_VLAN_PCP: ZT_VirtualNetworkRuleType = 27;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_VLAN_DEI: ZT_VirtualNetworkRuleType = 28;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_MAC_SOURCE: ZT_VirtualNetworkRuleType =
    29;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_MAC_DEST: ZT_VirtualNetworkRuleType = 30;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_IPV4_SOURCE: ZT_VirtualNetworkRuleType =
    31;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_IPV4_DEST: ZT_VirtualNetworkRuleType = 32;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_IPV6_SOURCE: ZT_VirtualNetworkRuleType =
    33;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_IPV6_DEST: ZT_VirtualNetworkRuleType = 34;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_IP_TOS: ZT_VirtualNetworkRuleType = 35;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_IP_PROTOCOL: ZT_VirtualNetworkRuleType =
    36;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_ETHERTYPE: ZT_VirtualNetworkRuleType = 37;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_ICMP: ZT_VirtualNetworkRuleType = 38;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_IP_SOURCE_PORT_RANGE:
    ZT_VirtualNetworkRuleType = 39;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_IP_DEST_PORT_RANGE:
    ZT_VirtualNetworkRuleType = 40;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_CHARACTERISTICS:
    ZT_VirtualNetworkRuleType = 41;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_FRAME_SIZE_RANGE:
    ZT_VirtualNetworkRuleType = 42;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_RANDOM: ZT_VirtualNetworkRuleType = 43;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_TAGS_DIFFERENCE:
    ZT_VirtualNetworkRuleType = 44;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_TAGS_BITWISE_AND:
    ZT_VirtualNetworkRuleType = 45;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_TAGS_BITWISE_OR:
    ZT_VirtualNetworkRuleType = 46;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_TAGS_BITWISE_XOR:
    ZT_VirtualNetworkRuleType = 47;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_TAGS_EQUAL: ZT_VirtualNetworkRuleType =
    48;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_TAG_SENDER: ZT_VirtualNetworkRuleType =
    49;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_TAG_RECEIVER: ZT_VirtualNetworkRuleType =
    50;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH_INTEGER_RANGE: ZT_VirtualNetworkRuleType =
    51;
pub const ZT_VirtualNetworkRuleType_ZT_NETWORK_RULE_MATCH__MAX_ID: ZT_VirtualNetworkRuleType = 63;
pub type ZT_VirtualNetworkRuleType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ZT_VirtualNetworkRule {
    pub t: u8,
    pub v: ZT_VirtualNetworkRule__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ZT_VirtualNetworkRule__bindgen_ty_1 {
    pub ipv6: ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1,
    pub ipv4: ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2,
    pub intRange: ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3,
    pub characteristics: u64,
    pub port: [u16; 2usize],
    pub zt: u64,
    pub randomProbability: u32,
    pub mac: [u8; 6usize],
    pub vlanId: u16,
    pub vlanPcp: u8,
    pub vlanDei: u8,
    pub etherType: u16,
    pub ipProtocol: u8,
    pub ipTos: ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4,
    pub frameSize: [u16; 2usize],
    pub icmp: ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5,
    pub tag: ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6,
    pub fwd: ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7,
    pub qosBucket: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1 {
    pub ip: [u8; 16usize],
    pub mask: u8,
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1>(),
        17usize,
        concat!(
            "Size of: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1>())).ip
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1>())).mask
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2 {
    pub ip: u32,
    pub mask: u8,
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2>())).ip
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2>())).mask
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3 {
    pub start: u64,
    pub end: u32,
    pub idx: u16,
    pub format: u8,
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3>())).start
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3>())).end
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3>())).idx
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3>())).format
                as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(format)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4 {
    pub mask: u8,
    pub value: [u8; 2usize],
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4>())).mask
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4>())).value
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5 {
    pub type_: u8,
    pub code: u8,
    pub flags: u8,
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5>())).code
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5>())).flags
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6 {
    pub id: u32,
    pub value: u32,
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6>())).id
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6>())).value
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7 {
    pub address: u64,
    pub flags: u32,
    pub length: u16,
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7>())).address
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7>())).flags
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7>())).length
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(length)
        )
    );
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRule__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRule__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(ZT_VirtualNetworkRule__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRule__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).ipv6 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(ipv6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).ipv4 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(ipv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).intRange as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(intRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).characteristics
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(characteristics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).port as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).zt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(zt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).randomProbability
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(randomProbability)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).mac as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).vlanId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(vlanId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).vlanPcp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(vlanPcp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).vlanDei as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(vlanDei)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).etherType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(etherType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).ipProtocol as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(ipProtocol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).ipTos as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(ipTos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).frameSize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(frameSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).icmp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(icmp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).tag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).fwd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(fwd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkRule__bindgen_ty_1>())).qosBucket as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule__bindgen_ty_1),
            "::",
            stringify!(qosBucket)
        )
    );
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRule() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRule>(),
        32usize,
        concat!("Size of: ", stringify!(ZT_VirtualNetworkRule))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRule>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_VirtualNetworkRule))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkRule>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkRule>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRule),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
pub struct ZT_VirtualNetworkRoute {
    pub target: libc::sockaddr_storage,
    pub via: libc::sockaddr_storage,
    pub flags: u16,
    pub metric: u16,
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkRoute() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkRoute>(),
        264usize,
        concat!("Size of: ", stringify!(ZT_VirtualNetworkRoute))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkRoute>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_VirtualNetworkRoute))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkRoute>())).target as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRoute),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkRoute>())).via as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRoute),
            "::",
            stringify!(via)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkRoute>())).flags as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRoute),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkRoute>())).metric as *const _ as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkRoute),
            "::",
            stringify!(metric)
        )
    );
}
#[repr(C)]
pub struct ZT_VirtualNetworkDNS {
    pub domain: [::std::os::raw::c_char; 128usize],
    pub server_addr: [libc::sockaddr_storage; 4usize],
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkDNS() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkDNS>(),
        640usize,
        concat!("Size of: ", stringify!(ZT_VirtualNetworkDNS))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkDNS>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_VirtualNetworkDNS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkDNS>())).domain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkDNS),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkDNS>())).server_addr as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkDNS),
            "::",
            stringify!(server_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_MulticastGroup {
    pub mac: u64,
    pub adi: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_ZT_MulticastGroup() {
    assert_eq!(
        ::std::mem::size_of::<ZT_MulticastGroup>(),
        16usize,
        concat!("Size of: ", stringify!(ZT_MulticastGroup))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_MulticastGroup>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_MulticastGroup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_MulticastGroup>())).mac as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_MulticastGroup),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_MulticastGroup>())).adi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_MulticastGroup),
            "::",
            stringify!(adi)
        )
    );
}
pub const ZT_VirtualNetworkConfigOperation_ZT_VIRTUAL_NETWORK_CONFIG_OPERATION_UP:
    ZT_VirtualNetworkConfigOperation = 1;
pub const ZT_VirtualNetworkConfigOperation_ZT_VIRTUAL_NETWORK_CONFIG_OPERATION_CONFIG_UPDATE:
    ZT_VirtualNetworkConfigOperation = 2;
pub const ZT_VirtualNetworkConfigOperation_ZT_VIRTUAL_NETWORK_CONFIG_OPERATION_DOWN:
    ZT_VirtualNetworkConfigOperation = 3;
pub const ZT_VirtualNetworkConfigOperation_ZT_VIRTUAL_NETWORK_CONFIG_OPERATION_DESTROY:
    ZT_VirtualNetworkConfigOperation = 4;
pub type ZT_VirtualNetworkConfigOperation = ::std::os::raw::c_uint;
pub const ZT_PeerRole_ZT_PEER_ROLE_LEAF: ZT_PeerRole = 0;
pub const ZT_PeerRole_ZT_PEER_ROLE_MOON: ZT_PeerRole = 1;
pub const ZT_PeerRole_ZT_PEER_ROLE_PLANET: ZT_PeerRole = 2;
pub type ZT_PeerRole = ::std::os::raw::c_uint;
pub const ZT_Vendor_ZT_VENDOR_UNSPECIFIED: ZT_Vendor = 0;
pub const ZT_Vendor_ZT_VENDOR_ZEROTIER: ZT_Vendor = 1;
pub type ZT_Vendor = ::std::os::raw::c_uint;
pub const ZT_Platform_ZT_PLATFORM_UNSPECIFIED: ZT_Platform = 0;
pub const ZT_Platform_ZT_PLATFORM_LINUX: ZT_Platform = 1;
pub const ZT_Platform_ZT_PLATFORM_WINDOWS: ZT_Platform = 2;
pub const ZT_Platform_ZT_PLATFORM_MACOS: ZT_Platform = 3;
pub const ZT_Platform_ZT_PLATFORM_ANDROID: ZT_Platform = 4;
pub const ZT_Platform_ZT_PLATFORM_IOS: ZT_Platform = 5;
pub const ZT_Platform_ZT_PLATFORM_SOLARIS_SMARTOS: ZT_Platform = 6;
pub const ZT_Platform_ZT_PLATFORM_FREEBSD: ZT_Platform = 7;
pub const ZT_Platform_ZT_PLATFORM_NETBSD: ZT_Platform = 8;
pub const ZT_Platform_ZT_PLATFORM_OPENBSD: ZT_Platform = 9;
pub const ZT_Platform_ZT_PLATFORM_RISCOS: ZT_Platform = 10;
pub const ZT_Platform_ZT_PLATFORM_VXWORKS: ZT_Platform = 11;
pub const ZT_Platform_ZT_PLATFORM_FREERTOS: ZT_Platform = 12;
pub const ZT_Platform_ZT_PLATFORM_SYSBIOS: ZT_Platform = 13;
pub const ZT_Platform_ZT_PLATFORM_HURD: ZT_Platform = 14;
pub const ZT_Platform_ZT_PLATFORM_WEB: ZT_Platform = 15;
pub type ZT_Platform = ::std::os::raw::c_uint;
pub const ZT_Architecture_ZT_ARCHITECTURE_UNSPECIFIED: ZT_Architecture = 0;
pub const ZT_Architecture_ZT_ARCHITECTURE_X86: ZT_Architecture = 1;
pub const ZT_Architecture_ZT_ARCHITECTURE_X64: ZT_Architecture = 2;
pub const ZT_Architecture_ZT_ARCHITECTURE_ARM32: ZT_Architecture = 3;
pub const ZT_Architecture_ZT_ARCHITECTURE_ARM64: ZT_Architecture = 4;
pub const ZT_Architecture_ZT_ARCHITECTURE_MIPS32: ZT_Architecture = 5;
pub const ZT_Architecture_ZT_ARCHITECTURE_MIPS64: ZT_Architecture = 6;
pub const ZT_Architecture_ZT_ARCHITECTURE_POWER32: ZT_Architecture = 7;
pub const ZT_Architecture_ZT_ARCHITECTURE_POWER64: ZT_Architecture = 8;
pub const ZT_Architecture_ZT_ARCHITECTURE_OPENRISC32: ZT_Architecture = 9;
pub const ZT_Architecture_ZT_ARCHITECTURE_OPENRISC64: ZT_Architecture = 10;
pub const ZT_Architecture_ZT_ARCHITECTURE_SPARC32: ZT_Architecture = 11;
pub const ZT_Architecture_ZT_ARCHITECTURE_SPARC64: ZT_Architecture = 12;
pub const ZT_Architecture_ZT_ARCHITECTURE_DOTNET_CLR: ZT_Architecture = 13;
pub const ZT_Architecture_ZT_ARCHITECTURE_JAVA_JVM: ZT_Architecture = 14;
pub const ZT_Architecture_ZT_ARCHITECTURE_WEB: ZT_Architecture = 15;
pub const ZT_Architecture_ZT_ARCHITECTURE_S390X: ZT_Architecture = 16;
pub type ZT_Architecture = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZT_VirtualNetworkConfig {
    pub nwid: u64,
    pub mac: u64,
    pub name: [::std::os::raw::c_char; 128usize],
    pub status: ZT_VirtualNetworkStatus,
    pub type_: ZT_VirtualNetworkType,
    pub mtu: ::std::os::raw::c_uint,
    pub dhcp: ::std::os::raw::c_int,
    pub bridge: ::std::os::raw::c_int,
    pub broadcastEnabled: ::std::os::raw::c_int,
    pub portError: ::std::os::raw::c_int,
    pub netconfRevision: ::std::os::raw::c_ulong,
    pub assignedAddressCount: ::std::os::raw::c_uint,
    pub assignedAddresses: [libc::sockaddr_storage; 32usize],
    pub routeCount: ::std::os::raw::c_uint,
    pub routes: [ZT_VirtualNetworkRoute; 128usize],
    pub multicastSubscriptionCount: ::std::os::raw::c_uint,
    pub multicastSubscriptions: [ZT_VirtualNetworkConfig__bindgen_ty_1; 1024usize],
    pub dns: ZT_VirtualNetworkDNS,
    pub ssoEnabled: bool,
    pub ssoVersion: u64,
    pub authenticationURL: [::std::os::raw::c_char; 2048usize],
    pub authenticationExpiryTime: u64,
    pub issuerURL: [::std::os::raw::c_char; 2048usize],
    pub centralAuthURL: [::std::os::raw::c_char; 2048usize],
    pub ssoNonce: [::std::os::raw::c_char; 128usize],
    pub ssoState: [::std::os::raw::c_char; 256usize],
    pub ssoClientID: [::std::os::raw::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_VirtualNetworkConfig__bindgen_ty_1 {
    pub mac: u64,
    pub adi: u32,
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkConfig__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkConfig__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ZT_VirtualNetworkConfig__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkConfig__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ZT_VirtualNetworkConfig__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig__bindgen_ty_1>())).mac as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig__bindgen_ty_1),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig__bindgen_ty_1>())).adi as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig__bindgen_ty_1),
            "::",
            stringify!(adi)
        )
    );
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkConfig() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkConfig>(),
        61928usize,
        concat!("Size of: ", stringify!(ZT_VirtualNetworkConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_VirtualNetworkConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).nwid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(nwid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).mac as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).status as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).type_ as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).mtu as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).dhcp as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(dhcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).bridge as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(bridge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).broadcastEnabled as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(broadcastEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).portError as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(portError)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).netconfRevision as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(netconfRevision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).assignedAddressCount as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(assignedAddressCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).assignedAddresses as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(assignedAddresses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).routeCount as *const _ as usize
        },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(routeCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).routes as *const _ as usize },
        4296usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(routes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).multicastSubscriptionCount
                as *const _ as usize
        },
        38088usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(multicastSubscriptionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).multicastSubscriptions as *const _
                as usize
        },
        38096usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(multicastSubscriptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).dns as *const _ as usize },
        54480usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(dns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).ssoEnabled as *const _ as usize
        },
        55120usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(ssoEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).ssoVersion as *const _ as usize
        },
        55128usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(ssoVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).authenticationURL as *const _
                as usize
        },
        55136usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(authenticationURL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).authenticationExpiryTime as *const _
                as usize
        },
        57184usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(authenticationExpiryTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).issuerURL as *const _ as usize
        },
        57192usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(issuerURL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).centralAuthURL as *const _ as usize
        },
        59240usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(centralAuthURL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).ssoNonce as *const _ as usize
        },
        61288usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(ssoNonce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).ssoState as *const _ as usize
        },
        61416usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(ssoState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkConfig>())).ssoClientID as *const _ as usize
        },
        61672usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkConfig),
            "::",
            stringify!(ssoClientID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_VirtualNetworkList {
    pub networks: *mut ZT_VirtualNetworkConfig,
    pub networkCount: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_ZT_VirtualNetworkList() {
    assert_eq!(
        ::std::mem::size_of::<ZT_VirtualNetworkList>(),
        16usize,
        concat!("Size of: ", stringify!(ZT_VirtualNetworkList))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_VirtualNetworkList>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_VirtualNetworkList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_VirtualNetworkList>())).networks as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkList),
            "::",
            stringify!(networks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_VirtualNetworkList>())).networkCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_VirtualNetworkList),
            "::",
            stringify!(networkCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_PhysicalPathConfiguration {
    pub trustedPathId: u64,
    pub mtu: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ZT_PhysicalPathConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<ZT_PhysicalPathConfiguration>(),
        16usize,
        concat!("Size of: ", stringify!(ZT_PhysicalPathConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_PhysicalPathConfiguration>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_PhysicalPathConfiguration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_PhysicalPathConfiguration>())).trustedPathId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PhysicalPathConfiguration),
            "::",
            stringify!(trustedPathId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_PhysicalPathConfiguration>())).mtu as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PhysicalPathConfiguration),
            "::",
            stringify!(mtu)
        )
    );
}
#[repr(C)]
pub struct ZT_PeerPhysicalPath {
    pub address: libc::sockaddr_storage,
    pub lastSend: u64,
    pub lastReceive: u64,
    pub trustedPathId: u64,
    pub latencyMean: f32,
    pub latencyMax: f32,
    pub latencyVariance: f32,
    pub packetLossRatio: f32,
    pub packetErrorRatio: f32,
    pub throughputMean: u64,
    pub throughputMax: f32,
    pub throughputVariance: f32,
    pub scope: u8,
    pub allocation: f32,
    pub ifname: [::std::os::raw::c_char; 32usize],
    pub localSocket: u64,
    pub expired: ::std::os::raw::c_int,
    pub preferred: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ZT_PeerPhysicalPath() {
    assert_eq!(
        ::std::mem::size_of::<ZT_PeerPhysicalPath>(),
        248usize,
        concat!("Size of: ", stringify!(ZT_PeerPhysicalPath))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_PeerPhysicalPath>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_PeerPhysicalPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).lastSend as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(lastSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).lastReceive as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(lastReceive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).trustedPathId as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(trustedPathId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).latencyMean as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(latencyMean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).latencyMax as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(latencyMax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).latencyVariance as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(latencyVariance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).packetLossRatio as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(packetLossRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).packetErrorRatio as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(packetErrorRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).throughputMean as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(throughputMean)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).throughputMax as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(throughputMax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).throughputVariance as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(throughputVariance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).scope as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).allocation as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(allocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).ifname as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(ifname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).localSocket as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(localSocket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).expired as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(expired)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerPhysicalPath>())).preferred as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerPhysicalPath),
            "::",
            stringify!(preferred)
        )
    );
}
#[repr(C)]
pub struct ZT_Peer {
    pub address: u64,
    pub versionMajor: ::std::os::raw::c_int,
    pub versionMinor: ::std::os::raw::c_int,
    pub versionRev: ::std::os::raw::c_int,
    pub latency: ::std::os::raw::c_int,
    pub role: ZT_PeerRole,
    pub isBonded: bool,
    pub bondingPolicy: ::std::os::raw::c_int,
    pub isHealthy: bool,
    pub numAliveLinks: ::std::os::raw::c_int,
    pub numTotalLinks: ::std::os::raw::c_int,
    pub customBondName: [::std::os::raw::c_char; 32usize],
    pub pathCount: ::std::os::raw::c_uint,
    pub paths: [ZT_PeerPhysicalPath; 64usize],
}
#[test]
fn bindgen_test_layout_ZT_Peer() {
    assert_eq!(
        ::std::mem::size_of::<ZT_Peer>(),
        15960usize,
        concat!("Size of: ", stringify!(ZT_Peer))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_Peer>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_Peer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).versionMajor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(versionMajor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).versionMinor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(versionMinor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).versionRev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(versionRev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).latency as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).role as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).isBonded as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(isBonded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).bondingPolicy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(bondingPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).isHealthy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(isHealthy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).numAliveLinks as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(numAliveLinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).numTotalLinks as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(numTotalLinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).customBondName as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(customBondName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).pathCount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(pathCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Peer>())).paths as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Peer),
            "::",
            stringify!(paths)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_PeerList {
    pub peers: *mut ZT_Peer,
    pub peerCount: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_ZT_PeerList() {
    assert_eq!(
        ::std::mem::size_of::<ZT_PeerList>(),
        16usize,
        concat!("Size of: ", stringify!(ZT_PeerList))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_PeerList>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_PeerList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerList>())).peers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerList),
            "::",
            stringify!(peers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_PeerList>())).peerCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_PeerList),
            "::",
            stringify!(peerCount)
        )
    );
}
pub const ZT_StateObjectType_ZT_STATE_OBJECT_NULL: ZT_StateObjectType = 0;
pub const ZT_StateObjectType_ZT_STATE_OBJECT_IDENTITY_PUBLIC: ZT_StateObjectType = 1;
pub const ZT_StateObjectType_ZT_STATE_OBJECT_IDENTITY_SECRET: ZT_StateObjectType = 2;
pub const ZT_StateObjectType_ZT_STATE_OBJECT_PLANET: ZT_StateObjectType = 3;
pub const ZT_StateObjectType_ZT_STATE_OBJECT_MOON: ZT_StateObjectType = 4;
pub const ZT_StateObjectType_ZT_STATE_OBJECT_PEER: ZT_StateObjectType = 5;
pub const ZT_StateObjectType_ZT_STATE_OBJECT_NETWORK_CONFIG: ZT_StateObjectType = 6;
pub type ZT_StateObjectType = ::std::os::raw::c_uint;
pub type ZT_Node = ::std::os::raw::c_void;
pub type ZT_VirtualNetworkConfigFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ZT_Node,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: u64,
        arg5: *mut *mut ::std::os::raw::c_void,
        arg6: ZT_VirtualNetworkConfigOperation,
        arg7: *const ZT_VirtualNetworkConfig,
    ) -> ::std::os::raw::c_int,
>;
pub type ZT_VirtualNetworkFrameFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ZT_Node,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: u64,
        arg5: *mut *mut ::std::os::raw::c_void,
        arg6: u64,
        arg7: u64,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_uint,
        arg10: *const ::std::os::raw::c_void,
        arg11: ::std::os::raw::c_uint,
    ),
>;
pub type ZT_EventCallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ZT_Node,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ZT_Event,
        arg5: *const ::std::os::raw::c_void,
    ),
>;
pub type ZT_StatePutFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ZT_Node,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ZT_StateObjectType,
        arg5: *const u64,
        arg6: *const ::std::os::raw::c_void,
        arg7: ::std::os::raw::c_int,
    ),
>;
pub type ZT_StateGetFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ZT_Node,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ZT_StateObjectType,
        arg5: *const u64,
        arg6: *mut ::std::os::raw::c_void,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type ZT_WirePacketSendFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ZT_Node,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: i64,
        arg5: *const libc::sockaddr_storage,
        arg6: *const ::std::os::raw::c_void,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type ZT_PathCheckFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ZT_Node,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: u64,
        arg5: i64,
        arg6: *const libc::sockaddr_storage,
    ) -> ::std::os::raw::c_int,
>;
pub type ZT_PathLookupFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ZT_Node,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: u64,
        arg5: ::std::os::raw::c_int,
        arg6: *mut libc::sockaddr_storage,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZT_Node_Callbacks {
    pub version: ::std::os::raw::c_long,
    pub statePutFunction: ZT_StatePutFunction,
    pub stateGetFunction: ZT_StateGetFunction,
    pub wirePacketSendFunction: ZT_WirePacketSendFunction,
    pub virtualNetworkFrameFunction: ZT_VirtualNetworkFrameFunction,
    pub virtualNetworkConfigFunction: ZT_VirtualNetworkConfigFunction,
    pub eventCallback: ZT_EventCallback,
    pub pathCheckFunction: ZT_PathCheckFunction,
    pub pathLookupFunction: ZT_PathLookupFunction,
}
#[test]
fn bindgen_test_layout_ZT_Node_Callbacks() {
    assert_eq!(
        ::std::mem::size_of::<ZT_Node_Callbacks>(),
        72usize,
        concat!("Size of: ", stringify!(ZT_Node_Callbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<ZT_Node_Callbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(ZT_Node_Callbacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Node_Callbacks>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Node_Callbacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_Node_Callbacks>())).statePutFunction as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Node_Callbacks),
            "::",
            stringify!(statePutFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_Node_Callbacks>())).stateGetFunction as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Node_Callbacks),
            "::",
            stringify!(stateGetFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_Node_Callbacks>())).wirePacketSendFunction as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Node_Callbacks),
            "::",
            stringify!(wirePacketSendFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_Node_Callbacks>())).virtualNetworkFrameFunction as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Node_Callbacks),
            "::",
            stringify!(virtualNetworkFrameFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_Node_Callbacks>())).virtualNetworkConfigFunction as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Node_Callbacks),
            "::",
            stringify!(virtualNetworkConfigFunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZT_Node_Callbacks>())).eventCallback as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Node_Callbacks),
            "::",
            stringify!(eventCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_Node_Callbacks>())).pathCheckFunction as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Node_Callbacks),
            "::",
            stringify!(pathCheckFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ZT_Node_Callbacks>())).pathLookupFunction as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ZT_Node_Callbacks),
            "::",
            stringify!(pathLookupFunction)
        )
    );
}
extern "C" {
    pub fn ZT_Node_new(
        node: *mut *mut ZT_Node,
        uptr: *mut ::std::os::raw::c_void,
        tptr: *mut ::std::os::raw::c_void,
        callbacks: *const ZT_Node_Callbacks,
        now: i64,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_delete(node: *mut ZT_Node);
}
extern "C" {
    pub fn ZT_Node_processWirePacket(
        node: *mut ZT_Node,
        tptr: *mut ::std::os::raw::c_void,
        now: i64,
        localSocket: i64,
        remoteAddress: *const libc::sockaddr_storage,
        packetData: *const ::std::os::raw::c_void,
        packetLength: ::std::os::raw::c_uint,
        nextBackgroundTaskDeadline: *mut i64,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_processVirtualNetworkFrame(
        node: *mut ZT_Node,
        tptr: *mut ::std::os::raw::c_void,
        now: i64,
        nwid: u64,
        sourceMac: u64,
        destMac: u64,
        etherType: ::std::os::raw::c_uint,
        vlanId: ::std::os::raw::c_uint,
        frameData: *const ::std::os::raw::c_void,
        frameLength: ::std::os::raw::c_uint,
        nextBackgroundTaskDeadline: *mut i64,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_processBackgroundTasks(
        node: *mut ZT_Node,
        tptr: *mut ::std::os::raw::c_void,
        now: i64,
        nextBackgroundTaskDeadline: *mut i64,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_join(
        node: *mut ZT_Node,
        nwid: u64,
        uptr: *mut ::std::os::raw::c_void,
        tptr: *mut ::std::os::raw::c_void,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_leave(
        node: *mut ZT_Node,
        nwid: u64,
        uptr: *mut *mut ::std::os::raw::c_void,
        tptr: *mut ::std::os::raw::c_void,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_multicastSubscribe(
        node: *mut ZT_Node,
        tptr: *mut ::std::os::raw::c_void,
        nwid: u64,
        multicastGroup: u64,
        multicastAdi: ::std::os::raw::c_ulong,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_multicastUnsubscribe(
        node: *mut ZT_Node,
        nwid: u64,
        multicastGroup: u64,
        multicastAdi: ::std::os::raw::c_ulong,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_orbit(
        node: *mut ZT_Node,
        tptr: *mut ::std::os::raw::c_void,
        moonWorldId: u64,
        moonSeed: u64,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_deorbit(
        node: *mut ZT_Node,
        tptr: *mut ::std::os::raw::c_void,
        moonWorldId: u64,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_Node_address(node: *mut ZT_Node) -> u64;
}
extern "C" {
    pub fn ZT_Node_status(node: *mut ZT_Node, status: *mut ZT_NodeStatus);
}
extern "C" {
    pub fn ZT_Node_peers(node: *mut ZT_Node) -> *mut ZT_PeerList;
}
extern "C" {
    pub fn ZT_Node_networkConfig(node: *mut ZT_Node, nwid: u64) -> *mut ZT_VirtualNetworkConfig;
}
extern "C" {
    pub fn ZT_Node_networks(node: *mut ZT_Node) -> *mut ZT_VirtualNetworkList;
}
extern "C" {
    pub fn ZT_Node_freeQueryResult(node: *mut ZT_Node, qr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ZT_Node_addLocalInterfaceAddress(
        node: *mut ZT_Node,
        addr: *const libc::sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ZT_Node_clearLocalInterfaceAddresses(node: *mut ZT_Node);
}
extern "C" {
    pub fn ZT_Node_sendUserMessage(
        node: *mut ZT_Node,
        tptr: *mut ::std::os::raw::c_void,
        dest: u64,
        typeId: u64,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ZT_Node_setNetconfMaster(
        node: *mut ZT_Node,
        networkConfigMasterInstance: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ZT_Node_setPhysicalPathConfiguration(
        node: *mut ZT_Node,
        pathNetwork: *const libc::sockaddr_storage,
        pathConfig: *const ZT_PhysicalPathConfiguration,
    ) -> ZT_ResultCode;
}
extern "C" {
    pub fn ZT_version(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        revision: *mut ::std::os::raw::c_int,
    );
}
